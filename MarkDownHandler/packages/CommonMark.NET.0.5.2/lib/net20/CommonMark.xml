<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonMark</name>
    </assembly>
    <members>
        <member name="T:CommonMark.CommonMarkConverter">
            <summary>
            Contains methods for parsing and formatting CommonMark data.
            </summary>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.ProcessStage1(System.IO.TextReader,CommonMark.CommonMarkSettings)">
            <summary>
            Performs the first stage of the conversion - parses block elements from the source and created the syntax tree.
            </summary>
            <param name="source">The reader that contains the source data.</param>
            <param name="settings">The object containing settings for the parsing process.</param>
            <returns>The block element that represents the document.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during block parsing.</exception>
            <exception cref="T:System.IO.IOException">when error occur while reading the data.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.ProcessStage2(CommonMark.Syntax.Block,CommonMark.CommonMarkSettings)">
            <summary>
            Performs the second stage of the conversion - parses block element contents into inline elements.
            </summary>
            <param name="document">The top level document element.</param>
            <param name="settings">The object containing settings for the parsing process.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="document"/> does not represent a top level document.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="document"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during inline parsing.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.ProcessStage3(CommonMark.Syntax.Block,System.IO.TextWriter,CommonMark.CommonMarkSettings)">
            <summary>
            Performs the last stage of the conversion - converts the syntax tree to HTML representation.
            </summary>
            <param name="document">The top level document element.</param>
            <param name="target">The target text writer where the result will be written to.</param>
            <param name="settings">The object containing settings for the formatting process.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="document"/> does not represent a top level document.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="document"/> or <paramref name="target"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during formatting.</exception>
            <exception cref="T:System.IO.IOException">when error occur while writing the data to the target.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.Convert(System.IO.TextReader,System.IO.TextWriter,CommonMark.CommonMarkSettings)">
            <summary>
            Converts the given source data and writes the result directly to the target.
            </summary>
            <param name="source">The reader that contains the source data.</param>
            <param name="target">The target text writer where the result will be written to.</param>
            <param name="settings">The object containing settings for the parsing and formatting process.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> or <paramref name="target"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during parsing or formatting.</exception>
            <exception cref="T:System.IO.IOException">when error occur while reading or writing the data.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.Convert(System.String,CommonMark.CommonMarkSettings)">
            <summary>
            Converts the given source data and returns the result as a string.
            </summary>
            <param name="source">The source data.</param>
            <param name="settings">The object containing settings for the parsing and formatting process.</param>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during parsing or formatting.</exception>
            <returns>The converted data.</returns>
        </member>
        <member name="P:CommonMark.CommonMarkConverter.AssemblyVersion">
            <summary>
            Gets the CommonMark assembly version number. Note that might differ from the actual release version
            since the assembly version is not always incremented to reduce possible reference errors when updating.
            </summary>
        </member>
        <member name="T:CommonMark.CommonMarkException">
            <summary>
            An exception that is caught during CommonMark parsing or formatting.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkException.BlockElement">
            <summary>
            Gets the block that caused the exception. Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkException.InlineElement">
            <summary>
            Gets the inline element that caused the exception. Can be <c>null</c>.
            </summary>
        </member>
        <member name="T:CommonMark.CommonMarkSettings">
            <summary>
            Class used to configure the behavior of <see cref="T:CommonMark.CommonMarkConverter"/>.
            </summary>
        </member>
        <member name="M:CommonMark.CommonMarkSettings.Clone">
            <summary>
            Creates a copy of this configuration object.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.OutputFormat">
            <summary>
            Gets or sets the output format used by the last stage of conversion.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.UriResolver">
            <summary>
            Gets or sets the delegate that is used to resolve addresses during rendering process. Can be used to process application relative URLs (<c>~/foo/bar</c>).
            </summary>
            <example><code>CommonMarkSettings.Default.UriResolver = VirtualPathUtility.ToAbsolute;</code></example>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.Default">
            <summary>
            The default settings for the converter. If the properties of this instance are modified, the changes will be applied to all
            future conversions that do not specify their own settings.
            </summary>
        </member>
        <member name="T:CommonMark.Func`2">
            <summary>An alternative to <c>System.Func</c> which is not present in .NET 2.0.</summary>
        </member>
        <member name="T:CommonMark.OutputFormat">
            <summary>
            Specifies different formatters supported by the converter.
            </summary>
        </member>
        <member name="F:CommonMark.OutputFormat.Html">
            <summary>
            The output is standard HTML format according to the CommonMark specification.
            </summary>
        </member>
        <member name="F:CommonMark.OutputFormat.SyntaxTree">
            <summary>
            The output is a debug view of the syntax tree. Usable for debugging.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.EntityDecoder.DecodeEntity(System.String)">
            <summary>
            Decodes the given HTML entity to the matching Unicode characters.
            </summary>
            <param name="entity">The entity without <c>&amp;</c> and <c>;</c> symbols, for example, <c>copy</c>.</param>
            <returns>The unicode character set or <c>null</c> if the entity was not recognized.</returns>
        </member>
        <member name="M:CommonMark.Parser.EntityDecoder.DecodeEntity(System.Int32)">
            <summary>
            Decodes the given UTF-32 character code to the matching set of UTF-16 characters.
            </summary>
            <returns>The unicode character set or <c>null</c> if the entity was not recognized.</returns>
        </member>
        <member name="F:CommonMark.Parser.EntityDecoder._entityMap">
            <summary>
            Source: http://www.w3.org/html/wg/drafts/html/master/syntax.html#named-character-references
            </summary>
        </member>
        <member name="T:CommonMark.Parser.InlineStack">
            <summary>
            Describes an element in a stack of possible inline openers.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Priority">
            <summary>
            The parser priority if this stack entry.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Previous">
            <summary>
            Previous entry in the stack. <c>null</c> if this is the last one.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Next">
            <summary>
            Next entry in the stack. <c>null</c> if this is the last one.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.StartingInline">
            <summary>
            The at-the-moment text inline that could be transformed into the opener.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.DelimeterCount">
            <summary>
            The number of delimeter characters found for this opener.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Delimeter">
            <summary>
            The character that was used in the opener.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.StartPosition">
            <summary>
            The position in the <see cref="F:CommonMark.Parser.Subject.Buffer"/> where this inline element was found.
            Used only if the specific parser requires this information.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Flags">
            <summary>
            The flags set for this stack entry.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineStack.RemoveStackEntry(CommonMark.Parser.InlineStack,CommonMark.Parser.Subject,CommonMark.Parser.InlineStack)">
            <summary>
            Removes a subset of the stack.
            </summary>
            <param name="first">The first entry to be removed.</param>
            <param name="subj">The subject associated with this stack. Can be <c>null</c> if the pointers in the subject should not be updated.</param>
            <param name="last">The last entry to be removed. Can be <c>null</c> if everything starting from <paramref name="first"/> has to be removed.</param>
        </member>
        <member name="T:CommonMark.Parser.ScannerCharacterMatcher">
            <summary>
            Class containing methods for fast forward matching of string contents
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchWhitespaces(System.String,System.Char@,System.Int32@,System.Int32)">
            <summary>
            Moves along the given string as long as the current character is a whitespace.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetter(System.String,System.Char@,System.Int32@,System.Int32)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetterOrDigit(System.String,System.Char@,System.Int32@,System.Int32)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or digit.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetterOrDigit(System.String,System.Char@,System.Int32@,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or digit or one of the given additional characters.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetterOrDigit(System.String,System.Char@,System.Int32@,System.Int32,System.Char)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or digit or one of the given additional characters.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetter(System.String,System.Char@,System.Int32@,System.Int32,System.Char,System.Char)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or one of the given additional characters.
            </summary>
        </member>
        <member name="T:CommonMark.Parser.Scanner">
            <summary>
            Contains the regular expressions that are used in the parsers.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_html_tag(System.String,System.Int32)">
            <summary>
            Try to match an HTML tag after first &lt;, returning number of chars matched.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Scanner.schemeArray">
            <summary>
            List of valid schemes of an URL. The array must be sorted.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_autolink_uri(System.String,System.Int32)">
            <summary>
            Try to match URI autolink after first &lt;, returning number of chars matched.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_autolink_email(System.String,System.Int32)">
            <summary>
            Try to match email autolink after first &lt;, returning num of chars matched.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_html_block_tag(System.String,System.Int32)">
            <summary>
            Try to match an HTML block tag including first &lt;.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_link_url(System.String,System.Int32)">
            <summary>
            Try to match a URL in a link or reference, return number of chars matched.
            This may optionally be contained in &lt;..&gt;; otherwise
            whitespace and unbalanced right parentheses aren't allowed.
            Newlines aren't ever allowed.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_link_title(System.String,System.Int32)">
            <summary>
            Try to match a link title (in single quotes, in double quotes, or
            in parentheses), returning number of chars matched.  Allow one
            level of internal nesting (quotes within quotes).
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_spacechars(System.String,System.Int32)">
            <summary>
            Match space characters, including newlines.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_atx_header_start(System.String,System.Int32,System.Int32@)">
            <summary>
            Match ATX header start.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_setext_header_line(System.String,System.Int32)">
            <summary>
            Match sexext header line.  Return 1 for level-1 header,
            2 for level-2, 0 for no match.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_hrule(System.String,System.Int32)">
            <summary>
            Scan a horizontal rule line: "...three or more hyphens, asterisks,
            or underscores on a line by themselves. If you wish, you may use
            spaces between the hyphens or asterisks."
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_open_code_fence(System.String,System.Int32)">
            <summary>
            Scan an opening code fence. Returns the number of characters forming the fence.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_close_code_fence(System.String,System.Int32,System.Int32)">
            <summary>
            Scan a closing code fence with length at least len.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_entity(System.String,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Scans an entity.
            Returns number of chars matched.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.StartLine">
            <remarks>Original: start_line</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.StartColumn">
            <remarks>Original: start_column</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.EndLine">
            <remarks>Original: end_line</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.IsOpen">
            <remarks>Original: open</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.IsLastLineBlank">
            <remarks>Original: last_line_blank</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.FirstChild">
            <remarks>Original: children</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.LastChild">
            <remarks>Original: last_child</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.StringContent">
            <summary>
            Gets or sets the string content of this block. The content consists of multiple string parts to avoid string concatenation.
            Note that some parts of the parser (for example, <see cref="!:Formatter.HtmlPrinter.EscapeHtml(StringContent, bool, System.IO.TextWriter)"/>) might assume that
            the parts are not split within certain objects, so it is advised that the parts are split on newline.
            </summary>
            <remarks>Original: string_content</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.InlineContent">
            <remarks>Original: inline_content</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.ListData">
            <remarks>Original: list_data</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.FencedCodeData">
            <remarks>Original: fenced_code_data</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.HeaderLevel">
            <remarks>Original: header_level</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.ReferenceMap">
            <remarks>Original: refmap</remarks>
        </member>
        <member name="P:CommonMark.Syntax.Block.Previous">
            <remarks>Original: prev</remarks>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.CreateChildBlock(CommonMark.Syntax.Block,CommonMark.Syntax.BlockTag,System.Int32,System.Int32)">
            <summary>
            Adds a new block as child of another. Return the child.
            </summary>
            <remarks>Original: add_child</remarks>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.ProcessInlines(CommonMark.Syntax.Block,System.Collections.Generic.Dictionary{System.String,CommonMark.Syntax.Reference})">
            <summary>
            Walk through the block, its children and siblings, parsing string content into inline content where appropriate.
            </summary>
            <param name="block">The document level block from which to start the processing.</param>
            <param name="refmap">The reference mapping used when parsing links.</param>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.ParseListMarker(System.String,System.Int32,CommonMark.Syntax.ListData@)">
            <summary>
            Attempts to parse a list item marker (bullet or enumerated).
            On success, returns length of the marker, and populates
            data with the details.  On failure, returns 0.
            </summary>
            <remarks>Original: int parse_list_marker(string ln, int pos, ref ListData dataptr)</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.BlockQuote">
            <remarks>Original: block_quote</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.ListItem">
            <remarks>Original: list_item</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.FencedCode">
            <remarks>Original: fenced_code</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.IndentedCode">
            <remarks>Original: indented_code</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.HtmlBlock">
            <remarks>Original: html_block</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.AtxHeader">
            <remarks>Original: atx_header</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.SETextHeader">
            <remarks>Original: setext_header</remarks>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.ReferenceDefinition">
            <remarks>Original: reference_def</remarks>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.FenceLength">
            <remarks>Original: fence_length</remarks>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.FenceOffset">
            <remarks>Original: fence_offset</remarks>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.FenceChar">
            <remarks>Original: fence_char</remarks>
        </member>
        <member name="M:CommonMark.Formatter.HtmlPrinter.EscapeUrl(System.String,System.IO.TextWriter)">
            <summary>
            Escapes special URL characters.
            </summary>
            <remarks>Orig: escape_html(inp, preserve_entities)</remarks>
        </member>
        <member name="M:CommonMark.Formatter.HtmlPrinter.EscapeHtml(System.String,System.IO.TextWriter)">
            <summary>
            Escapes special HTML characters.
            </summary>
            <remarks>Orig: escape_html(inp, preserve_entities)</remarks>
        </member>
        <member name="M:CommonMark.Formatter.HtmlPrinter.EscapeHtml(CommonMark.Syntax.StringContent,System.IO.TextWriter)">
            <summary>
            Escapes special HTML characters.
            </summary>
            <remarks>Orig: escape_html(inp, preserve_entities)</remarks>
        </member>
        <member name="M:CommonMark.Formatter.HtmlPrinter.BlocksToHtml(System.IO.TextWriter,CommonMark.Syntax.Block,CommonMark.CommonMarkSettings)">
            <summary>
            Convert a block list to HTML.  Returns 0 on success, and sets result.
            </summary>
            <remarks>Orig: blocks_to_html</remarks>
        </member>
        <member name="M:CommonMark.Formatter.HtmlPrinter.InlinesToPlainText(CommonMark.Formatter.HtmlTextWriter,CommonMark.Syntax.Inline,CommonMark.CommonMarkSettings,System.Collections.Generic.Stack{CommonMark.Formatter.HtmlPrinter.InlineStackEntry})">
            <summary>
            Writes the inline list to the given writer as plain text (without any HTML tags).
            </summary>
            <seealso cref="!:https://github.com/jgm/CommonMark/issues/145"/>
        </member>
        <member name="M:CommonMark.Formatter.HtmlPrinter.InlinesToHtml(CommonMark.Formatter.HtmlTextWriter,CommonMark.Syntax.Inline,CommonMark.CommonMarkSettings,System.Collections.Generic.Stack{CommonMark.Formatter.HtmlPrinter.InlineStackEntry})">
            <summary>
            Writes the inline list to the given writer as HTML code. 
            </summary>
        </member>
        <member name="T:CommonMark.Formatter.HtmlTextWriter">
            <summary>
            A wrapper for <see cref="T:CommonMark.Formatter.HtmlPrinter"/> that keeps track if the last symbol has been a newline.
            </summary>
        </member>
        <member name="M:CommonMark.Formatter.HtmlTextWriter.EnsureLine">
            <summary>
            Adds a newline if the writer does not currently end with a newline.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.NextSibling">
            <summary>
            Gets the next sibling inline.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.LastSibling">
            <summary>
            Gets the last sibling of this inline. If no siblings are defined, returns self.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.NormalizeReference(CommonMark.Syntax.StringPart)">
            <summary>
            Collapses internal whitespace to single space, removes leading/trailing whitespace, folds case.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.NormalizeWhitespace(System.String,System.Int32,System.Int32)">
            <summary>
            Collapses consecutive space and newline characters into a single space.
            Additionaly removes leading and trailing spaces.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.scan_delims(CommonMark.Parser.Subject,System.Char,System.Boolean@,System.Boolean@)">
            <summary>
            Scan ***, **, or * and return number scanned, or 0.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.Unescape(System.String)">
            <summary>
            Destructively unescape a string: remove backslashes before punctuation or symbol characters.
            </summary>
            <param name="url">The string data that will be changed by unescaping any punctuation or symbol characters.</param>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.CleanUrl(System.String)">
            <summary>
            Clean a URL: remove surrounding whitespace and surrounding &lt; &gt; and remove \ that escape punctuation and other symbols.
            </summary>
            <remarks>Original: clean_url(ref string)</remarks>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.CleanTitle(System.String)">
            <summary>
            Clean a title: remove surrounding quotes and remove \ that escape punctuation.
            </summary>
            <remarks>Original: clean_title(ref string)</remarks>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ParseReferenceLabel(CommonMark.Parser.Subject)">
            <summary>
            Parses the contents of [..] for a reference label. Only used for parsing 
            reference definition labels for use with the reference dictionary because 
            it does not properly parse nested inlines.
            
            Assumes the source starts with '[' character or spaces before '['.
            Returns null and does not advance if no matching ] is found.
            Note the precedence:  code backticks have precedence over label bracket
            markers, which have precedence over *, _, and other inline formatting
            markers. So, 2 below contains a link while 1 does not:
            1. [a link `with a ](/url)` character
            2. [a link *with emphasized ](/url) text*        /// </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.String">
            <remarks>Original: str</remarks>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.RawHtml">
            <remarks>Original: raw_html</remarks>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Emphasis">
            <remarks>Original: emph</remarks>
        </member>
        <member name="P:CommonMark.Syntax.ListData.MarkerOffset">
            <remarks>Original: marker_offset</remarks>
        </member>
        <member name="P:CommonMark.Syntax.ListData.IsTight">
            <remarks>Original: tight</remarks>
        </member>
        <member name="M:CommonMark.Formatter.Printer.PrintBlocks(System.IO.TextWriter,CommonMark.Syntax.Block,System.Int32)">
            <summary>
            Write the block data to the given writer.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.Reference">
            <summary>
            Represents a parsed reference link definition.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.Reference.MaximumReferenceLabelLength">
            <summary>
            Represents the maximum allowed length of a reference definition (<c>foo</c> in <c>[foo]: /url</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.Reference.SelfReference">
            <summary>
            A special constant reference that represents an collapsed reference link: [foo][]
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.Reference.InvalidReference">
            <summary>
            A special constant reference that signifies that the reference label was not found: [foo][bar]
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Reference.Label">
            <summary>
            Gets or sets the label (the key by which it is referenced in the mapping) of the reference.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Reference.Url">
            <summary>
            Gets or sets the URL of the reference.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Reference.Title">
            <summary>
            Gets or sets the title of the reference (used in <c>&lt;a title="..."&gt;</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.Buffer">
            <summary>
            Gets or sets the whole buffer this instance is created over.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.Position">
            <summary>
            Gets or sets the current position in the buffer.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.LastInline">
            <summary>
            The last top-level inline parsed from this subject.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.LastPendingInline">
            <summary>
            The last entry of the current stack of possible emphasis openers. Can be <c>null</c>.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.FirstPendingInline">
            <summary>
            The first entry of the current stack of possible emphasis openers. Can be <c>null</c>.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.StringContent">
            <summary>
            Registers blocks of string data together so that it is not needed to concatenate multiple substrings
            together - thus reducing memory usage and number of string instances.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.ToString">
            <summary>
            Returns all of the data as a single string.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes the data contained in this instance to the given text writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:CommonMark.Syntax.StringContent.Length">
            <summary>
            Gets the total length of string data.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.StringPart">
            <summary>
            Represents a part of <see cref="T:CommonMark.Syntax.StringContent"/>.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.StringPart.Source">
            <summary>
            Gets or sets the string object this part is created from.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.StringPart.StartIndex">
            <summary>
            Gets or sets the index at which this part starts.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.StringPart.Length">
            <summary>
            Gets or sets the length of the part.
            </summary>
        </member>
        <member name="T:CommonMark.Utilities">
            <summary>
            Reusable utility functions, not directly related to parsing or formatting data.
            </summary>
        </member>
        <member name="M:CommonMark.Utilities.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning to the Debug window.
            </summary>
            <param name="message">The message with optional formatting placeholders.</param>
            <param name="args">The arguments for the formatting placeholders.</param>
        </member>
    </members>
</doc>
